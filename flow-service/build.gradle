// java编译的时候缺省状态下会因为中文字符而失败
[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

// 扩展定义
ext {
// 启动类
    MainClass = 'com.ecmp.FlowApplication'
}

//apply plugin: 'war'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "com.google.cloud.tools.jib"

//war {
//    enabled = true
//    //包名称
//    archiveName "${baseName}.${extension}"
//    //包存放路径
//    destinationDir = file("${rootProject.projectDir}/build/war")
//}

// 依赖
dependencies {
    compile project(':flow-entity')
    compile project(':flow-dao')
    compile project(':flow-api')
    compile project(':flow-service-client')
    compile(
            "org.springframework.boot:spring-boot-starter-web",
            "org.springframework.boot:spring-boot-starter-actuator",
            "com.ecmp:cxf-service-ecmp-spring-boot-starter:$ecmp_version",


            //整合activiti所需要的jar
//        'org.activiti:activiti-spring-boot-starter-basic:5.22.0',
//            'org.springframework.boot:spring-boot-starter-webflux',

            //整合activiti所需要的额外包
//            'org.apache.directory.studio: org.apache.commons.io: 2.4',
////            'org.activiti:activiti-json-converter: 5.22.0',
//             'org.apache.xmlgraphics:batik-transcoder:1.9.1',

//            //整个activiti编辑器所需要的部分
//            compile('org.activiti:activiti-rest:5.22.0'){
//                exclude group:'org.slf4j'
//            }
//            'org.activiti', name: 'activiti-diagram-rest', version: '5.22.0'
            "org.activiti:activiti-engine:$activiti_version",
            "org.activiti:activiti-bpmn-model:$activiti_version",
            "org.activiti:activiti-bpmn-converter:$activiti_version",
            "org.activiti:activiti-bpmn-layout:$activiti_version",
            "org.activiti:activiti-spring:$activiti_version",
            "org.activiti:activiti-process-validation:$activiti_version",

//            "com.h2database:h2:1.3.172",
            "org.codehaus.groovy:groovy:2.4.10",
            "com.fasterxml.uuid:java-uuid-generator:3.1.4",
            "net.sf.dozer:dozer:5.5.1",
            "com.ecmp:notify-api:$notify_version"
    )
//    compile group: 'org.springframework.data', name: 'spring-data-couchbase', version: '3.0.8.RELEASE'

    // 测试依赖
    testCompile(
            "org.springframework.boot:spring-boot-starter-test"
    )
}


bootJar  {
    enabled = true
    archiveName = 'flow-service.jar'
    mainClassName = MainClass
    manifest {
        attributes("Manifest-Version": "$project.version")
        attributes("Created-By": "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})".toString())
        attributes("Implementation-Title": "$project.name")
        attributes("Implementation-Version": "$project.version")
        attributes("Build-Time": new Date().format("yyyy-MM-dd HH:mm:ss"))
    }
}

jar {
    exclude('com/ecmp/FlowApplication.*')
    manifest {
        attributes("Manifest-Version": "$project.version")
        attributes("Extension-Name": "ECMP-$project.name")
        attributes("Build-Time": new Date().format("yyyy-MM-dd HH:mm:ss"))
    }
    enabled = true
}

/////////////////////////////////////上传Maven仓库////////////////////////////////////////
//打包源代码
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

//如果希望gradle install，安装到.m2本地仓库，参考下面的内容
install {
    repositories.mavenInstaller {
        pom.version = "$project.version"
        pom.artifactId = "$project.name"
        pom.groupId = "$project.group"
    }
}

//跳过上传任务
uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: MAVEN_REPO_URL) {
                authentication(userName: NEXUS_USERNAME, password: NEXUS_PASSWORD)
            }
            pom.version = "$project.version"
            pom.artifactId = "$project.name"
            pom.groupId = "$project.group"
        }
    }
    return 'Success'
}
jib {
    // 拉取的镜像的配置
    from {
        image = 'rddgit.changhong.com:8083/alpine-java:latest'
//        image = 'hub.changhong.com/pass/java:8-jdk-alpine'
//        auth {
//            username = "${docker_registry_username}"
//            password = "${docker_registry_password}"
//        }
    }
    // 要生成的镜像的配置
    to {
        image = "$docker_registry_url/$docker_registry_namespace/$docker_image_name"
        tags = ["${project.version}".toString(), 'latest']

        // credHelper：鉴权信息的存放方式，Google 使用 gcr, AWS使用 ecr-login, DockerHub 根据平台使用 osxkeychain, wincred,secretservice,pass中的一种，可以参考 docker-credential-helpers
        //credHelper = 'osxkeychain'
        auth {
            username = "${docker_registry_username}"
            password = "${docker_registry_password}"
        }
    }
    container {
        // 容器创建时间用
        creationTime = 'USE_CURRENT_TIMESTAMP'
        // jvmFlgs: JVM 容器的参数，和 Dockerfile 的 ENTRYPOINT作用相同
        jvmFlags = [
                '-Djava.security.egd=file:/dev/./urandom',
                '-Dfile.encoding=utf-8',
                '-Duser.timezone=GMT+08'
        ]
        // jvmFlags = ['-Xms512m', '-Xdebug', '-Xmy:flag=jib-rules']
        // 启动类限定名
        mainClass = MainClass
        // main 方法的传入参数
        //args = ['somecp', 'args']
        // 容器暴露的端口，和 Dockerfile 的EXPOSE作用相同
        ports = ['8080']
        // 定义容器环境变量 建议在镜像部署时定义
//        environment = [
//                SPRING_OUTPUT_ANSI_ENABLED: 'ALWAYS',
//                JHIPSTER_SLEEP: '0'
//        ]
        // 添加标签,容器云环境部署有用
        // labels = [key1:'value1', key2:'value2']
        // 镜像格式,默认标准OCI
        //format = 'OCI'
    }
    // 如果私有镜像仓库没有启用https，设置allowInsecureRegistries参数为true
    allowInsecureRegistries = true
}
