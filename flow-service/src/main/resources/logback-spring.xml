<?xml version="1.0" encoding="UTF-8"?>
<configuration>

    <!-- 默认配置 -->
<!--    <include resource="org/springframework/boot/logging/logback/defaults.xml"/>-->
    <!-- 配置控制台(Console) -->
<!--    <include resource="org/springframework/boot/logging/logback/console-appender.xml"/>-->

    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />

    <!--
        日志初始化在ApplicationContext创建之前，所以@PropertySources加载的配置是读取不到的，
        系统环境变量、Spring Environment及application,bootstrap配置文件中的信息可以读取到
     -->

    <!-- 读取当前应用Environment中的属性. 读取application.yml中的值 -->
    <springProperty scope="context" name="APP_NAME" source="spring.application.name"/>
    <springProperty scope="context" name="ENV" source="spring.cloud.config.profile"/>
    <springProperty scope="context" name="APP_PORT" source="server.port"/>
    <springProperty scope="context" name="DEFAULT_APP_PORT" source="spring.application.port"/>

    <property name="APP_PORT" value="${APP_PORT:-${DEFAULT_APP_PORT:-0}}"/>

    <property name="LOG_PATTERN" value="%d{HH:mm:ss.SSS} %5p [%15.15t] %-40.40logger{39} traceId:[%X{traceId:- }] : %m%n"/>

    <jmxConfigurator/>

    <property name="APP_PORT" value="${APP_PORT:-${DEFAULT_APP_PORT:-0}}"/>

    <property name="CONSOLE_LOG_PATTERN" value="%clr(%d{HH:mm:ss.SSS}){faint} %clr(%5p) %clr(${PID:- }){magenta} %clr([%15.15t]){faint} %clr(%-40.40logger{39}#%-4line){cyan} traceId:[%X{traceId:- }] %clr(:){faint} %m%n"/>

    <appender name="CONSOLE" class="com.ecmp.log.extend.SeiConsoleAppender">
        <encoder>
            <pattern>${LOG_PATTERN}</pattern>
            <!--<charset>utf8</charset>-->
        </encoder>
    </appender>

    <!-- 读取当前应用Environment中的属性. 读取application.yml中的值 -->
    <springProperty scope="context" name="bootstrapServers" source="spring.kafka.bootstrap-servers" defaultValue="localhost:9092"/>
    <!--    <springProperty scope="context" name="IP" source="spring.cloud.client.ipAddress" />-->

    <!-- kafka的appender配置 -->
    <appender name="kafkaAppender" class="com.ecmp.log.extend.SeiKafkaAppender">
        <encoder charset="UTF-8" class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
            <providers>
                <timestamp>
                    <timeZone>UTC</timeZone>
                </timestamp>
                <pattern>
                    <pattern>
                        {
                        "timestamp": "%d{yyyy-MM-dd'T'HH:mm:ss.SSSZ}",

                        "seiVersion": "sei-${sei-version:-}",
                        "traceId": "%X{traceId:-}",
                        "tracePath": "%X{tracePath:-}",
                        "userId": "%X{userId:-}",
                        "account": "%X{account:-}",
                        "userName": "%X{userName:-}",
                        "className": "%X{className:-}",
                        "methodName": "%X{methodName:-}",
                        "args": "%X{args:-}",

                        "requestURI": "%X{requestUrl:-}",
                        "queryString": "%X{queryString:-}",
                        "userAgent": "%X{UserAgent:-}",

                        "host": "${HOSTNAME:-}",
                        "env": "${ENV:-}",
                        "serviceName": "${APP_NAME}",

                        "pid": "${PID:- }",
                        "logger": "%logger",
                        "level": "%p",
                        "message": "%msg",
                        "stackTrace": "%ex"
                        }
                    </pattern>
                </pattern>
            </providers>
        </encoder>
        <topic>SeiLoggerPlatform</topic>
        <!-- we don't care how the log messages will be partitioned  -->
        <keyingStrategy class="com.github.danielwegener.logback.kafka.keying.NoKeyKeyingStrategy" />

        <!-- use async delivery. the application threads are not blocked by logging -->
        <deliveryStrategy class="com.github.danielwegener.logback.kafka.delivery.AsynchronousDeliveryStrategy" />

        <!-- each <producerConfig> translates to regular kafka-client config (format: key=value) -->
        <!-- producer configs are documented here: https://kafka.apache.org/documentation.html#newproducerconfigs -->
        <!-- bootstrap.servers is the only mandatory producerConfig -->
        <producerConfig>bootstrap.servers=${bootstrapServers}</producerConfig>
        <!-- don't wait for a broker to ack the reception of a batch.  -->
        <producerConfig>acks=0</producerConfig>
        <!-- wait up to 1000ms and collect log messages before sending them as a batch -->
        <producerConfig>linger.ms=1000</producerConfig>
        <!-- even if the producer buffer runs full, do not block the application but start to drop messages -->
        <producerConfig>max.block.ms=0</producerConfig>
        <!-- define a client-id that you use to identify yourself against the kafka broker -->
        <producerConfig>client.id=${HOSTNAME}-${CONTEXT_NAME}-logback-relaxed</producerConfig>

        <!-- Log every log message that could not be sent to kafka to STDERR -->
        <appender-ref ref="CONSOLE"/>
    </appender>



    <!-- 日志输出级别 -->
    <root level="DEBUG">
        <appender-ref ref="CONSOLE"/>

        <appender-ref ref="kafkaAppender"/>
    </root>

    <!-- additivity="true" 是否重复记录 -->
    <!-- 3rd party Loggers -->
    <!-- spring -->
    <logger name="org.springframework" level="WARN"/>
    <logger name="org.jboss.logging" level="WARN"/>
    <logger name="org.hibernate" level="WARN"/>
    <logger name="org.apache" level="WARN"/>
    <logger name="org.elasticsearch" level="WARN"/>
    <logger name="org.mongodb" level="WARN"/>
    <logger name="io.lettuce" level="WARN"/>
    <!-- swagger log configure -->
    <logger name="io.swagger" level="WARN"/>
    <!-- kafka log configure -->
    <logger name="org.apache.kafka" level="WARN"/>
    <!-- thymeleaf log configure -->
    <logger name="org.thymeleaf" level="WARN"/>
    <!-- redisson log configure -->
    <logger name="org.redisson" level="WARN"/>
    <!--<logger name="io.netty.util.internal" level="WARN"/>-->
    <logger name="io.netty" level="WARN"/>
    <logger name="druid" level="WARN"/>
    <logger name="com.alibaba" level="WARN"/>
    <logger name="com.zaxxer.hikari" level="WARN"/>

    <logger name="org.apache.catalina.util.LifecycleBase" level="ERROR"/>
    <logger name="org.apache.coyote.http11.Http11NioProtocol" level="WARN"/>
    <logger name="org.apache.tomcat.util.net.NioSelectorPool" level="WARN"/>
    <logger name="org.hibernate.validator.internal.util.Version" level="WARN"/>
    <logger name="org.apache.catalina.startup.DigesterFactory" level="ERROR"/>
    <logger name="org.apache.sshd.common.util.SecurityUtils" level="WARN"/>
    <logger name="org.eclipse.jetty.util.component.AbstractLifeCycle" level="ERROR"/>

</configuration>
